diff -Naur linux-5.0_old/sound/soc/generic/botic-card.c linux-5.0/sound/soc/generic/botic-card.c
--- linux-5.0_old/sound/soc/generic/botic-card.c	1970-01-01 01:00:00.000000000 +0100
+++ linux-5.0/sound/soc/generic/botic-card.c	2019-04-20 13:50:14.429306907 +0200
@@ -0,0 +1,496 @@
+/*
+ * ASoC simple sound card support
+ *
+ * Miroslav Rudisin <miero@seznam.cz>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+#include <linux/module.h>
+#include <linux/moduleparam.h>
+#include <linux/timer.h>
+#include <linux/interrupt.h>
+#include <linux/platform_device.h>
+#include <linux/i2c.h>
+#include <linux/of_platform.h>
+#include <sound/soc.h>
+#include <sound/pcm_params.h>
+
+#include <linux/delay.h>
+
+#include <linux/of_gpio.h>
+
+#define ENABLE_EXT_MASTERCLK_44K1 1
+#define ENABLE_EXT_MASTERCLK_48K 2
+#define ENABLE_EXT_MASTERCLK_SWITCH_INVERT 4
+#define ENABLE_EXT_MASTERCLK_SINGLE 8
+
+#define ENABLE_DSD_FORMAT_SWITCH 1
+#define ENABLE_DSD_FORMAT_SWITCH_INVERT 2
+
+static int gpio_int_masterclk_enable = -1;
+static int gpio_ext_masterclk_switch = -1;
+static int gpio_dsd_format_switch = -1;
+static int gpio_card_power_switch = -1;
+
+static char *pinconfig = "default";
+
+static int ext_masterclk = ENABLE_EXT_MASTERCLK_44K1 | ENABLE_EXT_MASTERCLK_48K;
+static int dsd_format_switch = ENABLE_DSD_FORMAT_SWITCH;
+static int dai_format = SND_SOC_DAIFMT_CBS_CFS | SND_SOC_DAIFMT_NB_NF | SND_SOC_DAIFMT_I2S;
+
+static int clk_44k1 = 45158400;
+static int clk_48k = 49152000;
+static int blr_ratio = 64;
+
+static int is_dsd(snd_pcm_format_t format)
+{
+    switch (format) {
+        case SNDRV_PCM_FORMAT_DSD_U8:
+        case SNDRV_PCM_FORMAT_DSD_U16_LE:
+        case SNDRV_PCM_FORMAT_DSD_U32_LE:
+            return 1;
+            break;
+
+        default:
+            return 0;
+            break;
+    }
+}
+
+static int botic_hw_params(struct snd_pcm_substream *substream,
+             struct snd_pcm_hw_params *params)
+{
+    struct snd_soc_pcm_runtime *rtd = substream->private_data;
+    struct snd_soc_dai *codec_dai = rtd->codec_dai;
+    struct snd_soc_dai *cpu_dai = rtd->cpu_dai;
+    unsigned sysclk, bclk, divisor;
+    int ret;
+
+    unsigned int rate = params_rate(params);
+
+    /* set codec DAI configuration */
+    ret = snd_soc_dai_set_fmt(codec_dai, dai_format);
+    if ((ret < 0) && (ret != -ENOTSUPP))
+        return ret;
+
+    /* set cpu DAI configuration */
+    ret = snd_soc_dai_set_fmt(cpu_dai, dai_format);
+    if (ret < 0)
+        return ret;
+
+    /* select correct clock for requested sample rate */
+    if ((clk_44k1 != 0) && (clk_44k1 % rate == 0)) {
+        sysclk = clk_44k1;
+        if (gpio_int_masterclk_enable >= 0) {
+            gpio_set_value(gpio_int_masterclk_enable, 0);
+        }
+        if (gpio_ext_masterclk_switch >= 0) {
+            /* set level to LOW for 44k1 sampling rates */
+            gpio_set_value(gpio_ext_masterclk_switch,
+                    !!(ext_masterclk & ENABLE_EXT_MASTERCLK_SWITCH_INVERT));
+        }
+    } else if (clk_48k % rate == 0) {
+        sysclk = clk_48k;
+        if (gpio_ext_masterclk_switch >= 0) {
+            /* set level to HIGH for 48k sampling rates */
+            gpio_set_value(gpio_ext_masterclk_switch,
+                    !(ext_masterclk & ENABLE_EXT_MASTERCLK_SWITCH_INVERT));
+        }
+        if ((gpio_int_masterclk_enable >= 0) &&
+                !(ext_masterclk & ENABLE_EXT_MASTERCLK_48K)) {
+            /* 44k1 clock is disabled now, we can enable onboard clock */
+            gpio_set_value(gpio_int_masterclk_enable, 1);
+        }
+    } else if ((dai_format & SND_SOC_DAIFMT_CBM_CFM) == 0) {
+        printk("unsupported rate %d\n", rate);
+        return -EINVAL;
+    } else {
+        printk("slave rate %d\n", rate);
+        sysclk = 0;
+    }
+
+    /* setup DSD format switch */
+    if (!(dsd_format_switch & ENABLE_DSD_FORMAT_SWITCH) ||
+        (gpio_dsd_format_switch < 0)) {
+        /* DSD format switch is disabled or not available */
+    } else if (is_dsd(params_format(params))) {
+        /* DSD format switch is enabled, set level to HIGH for DSD playback */
+        gpio_set_value(gpio_dsd_format_switch,
+                !(dsd_format_switch & ENABLE_DSD_FORMAT_SWITCH_INVERT));
+    } else {
+        /* DSD format switch is enabled, set level to LOW for PCM playback */
+        gpio_set_value(gpio_dsd_format_switch,
+                !!(dsd_format_switch & ENABLE_DSD_FORMAT_SWITCH_INVERT));
+    }
+
+    /* set the codec system clock */
+    ret = snd_soc_dai_set_sysclk(codec_dai, 0, sysclk, SND_SOC_CLOCK_IN);
+    if ((ret < 0) && (ret != -ENOTSUPP))
+        return ret;
+
+    /* use the external clock */
+    ret = snd_soc_dai_set_sysclk(cpu_dai, 0, sysclk, SND_SOC_CLOCK_IN);
+    if (ret < 0) {
+        printk(KERN_WARNING "botic-card: unable to set clock to CPU; ret=%d", ret);
+        return ret;
+    }
+
+    if ((dai_format & SND_SOC_DAIFMT_CBM_CFM) != 0) {
+        printk("slave mode...\n");
+        return 0;
+    }
+
+    switch (params_format(params)) {
+        case SNDRV_PCM_FORMAT_DSD_U8:
+            /* Clock rate for DSD matches bitrate */
+            ret = snd_soc_dai_set_clkdiv(cpu_dai, 2, 0);
+            bclk = 8 * rate;
+            break;
+
+        case SNDRV_PCM_FORMAT_DSD_U16_LE:
+            /* Clock rate for DSD matches bitrate */
+            ret = snd_soc_dai_set_clkdiv(cpu_dai, 2, 0);
+            bclk = 16 * rate;
+            break;
+
+        case SNDRV_PCM_FORMAT_DSD_U32_LE:
+            /* Clock rate for DSD matches bitrate */
+            ret = snd_soc_dai_set_clkdiv(cpu_dai, 2, 0);
+            bclk = 32 * rate;
+            break;
+
+        default:
+            /* PCM */
+            ret = snd_soc_dai_set_clkdiv(cpu_dai, 2, blr_ratio);
+            if (blr_ratio != 0) {
+                bclk = blr_ratio * rate;
+            } else {
+                bclk = snd_soc_params_to_bclk(params);
+            }
+            break;
+    }
+    if (ret < 0) {
+        printk(KERN_WARNING "botic-card: unsupported BCLK/LRCLK ratio");
+        return ret;
+    }
+
+    divisor = sysclk / bclk;
+    ret = snd_soc_dai_set_clkdiv(cpu_dai, 1, divisor);
+    if (ret < 0) {
+        printk(KERN_WARNING "botic-card: unsupported set_clkdiv1");
+        return ret;
+    }
+
+    /* Insert delay needed for enabled clocks. */
+    udelay(50);
+
+    return 0;
+}
+
+static struct snd_soc_ops botic_ops = {
+    .hw_params = botic_hw_params,
+};
+
+/* digital audio interface glue - connects codec <--> CPU */
+static struct snd_soc_dai_link botic_dai = {
+    .name = "ExtDAC",
+    .stream_name = "external",
+    .ops = &botic_ops,
+};
+
+static struct snd_soc_card botic_card = {
+    .name = "Botic",
+    .owner = THIS_MODULE,
+    .dai_link = &botic_dai,
+    .num_links = 1,
+};
+
+static int get_optional_gpio(int *optional_gpio, struct platform_device *pdev,
+        const char *gpio_name, unsigned long gpio_flags)
+{
+    struct device_node *np = pdev->dev.of_node;
+    struct property *p;
+    int lp;
+    int ret;
+    int gpio;
+
+    p = of_find_property(np, gpio_name, &lp);
+    if (!p) {
+        dev_err(&pdev->dev, "entry for %s does not exist\n", gpio_name);
+        return -ENOENT;
+    }
+
+    if (lp == 0) {
+        *optional_gpio = -1;
+        return 0;
+    }
+
+    ret = of_get_named_gpio(np, gpio_name, 0);
+    if (ret < 0) {
+        dev_err(&pdev->dev, "failed to read GPIO for %s\n", gpio_name);
+        return ret;
+    }
+
+    gpio = ret;
+    ret = gpio_request_one(gpio, gpio_flags, gpio_name);
+    if (ret < 0) {
+        dev_err(&pdev->dev, "failed to claim GPIO for %s\n", gpio_name);
+        return ret;
+    }
+
+    *optional_gpio = gpio;
+
+    return 0;
+}
+
+static int asoc_botic_card_probe(struct platform_device *pdev)
+{
+    struct device_node *np = pdev->dev.of_node;
+    struct pinctrl *pctl;
+    struct pinctrl_state *pctl_state;
+    int ret;
+
+    /* load selected pinconfig */
+    pctl = devm_pinctrl_get(&pdev->dev);
+    if (IS_ERR(pctl)) {
+        ret = PTR_ERR(pctl);
+        goto asoc_botic_card_probe_error;
+    }
+    pctl_state = pinctrl_lookup_state(pctl, pinconfig);
+    if (IS_ERR(pctl_state)) {
+        dev_err(&pdev->dev, "unable to lookup pinconfig %s\n", pinconfig);
+        ret = PTR_ERR(pctl_state);
+        goto asoc_botic_card_probe_error;
+    }
+    ret = pinctrl_select_state(pctl, pctl_state);
+    if (ret < 0) {
+        dev_err(&pdev->dev, "unable to set pinconfig %s\n", pinconfig);
+        goto asoc_botic_card_probe_error;
+    }
+    dev_info(&pdev->dev, "using '%s' pinconfig\n", pinconfig);
+
+    /*
+     * TODO: Move GPIO handling out of the probe, if probe gets
+     * deferred, the gpio will have been claimed on previous
+     * probe and will fail on the second and susequent probes
+     */
+
+    /* request GPIO to control internal 24.576MHz oscillator */
+    ret = get_optional_gpio(&gpio_int_masterclk_enable, pdev,
+            "int-masterclk-enable", GPIOF_OUT_INIT_LOW);
+    if (ret < 0) {
+        goto asoc_botic_card_probe_error;
+    }
+
+    /* request GPIO to card power switch */
+    ret = get_optional_gpio(&gpio_card_power_switch, pdev,
+            "card-power-switch", GPIOF_OUT_INIT_LOW);
+    if (ret < 0) {
+        goto asoc_botic_card_probe_error;
+    }
+
+    if (ext_masterclk & (ENABLE_EXT_MASTERCLK_44K1 | ENABLE_EXT_MASTERCLK_48K)) {
+        /* request GPIO to switch between external 22.5792MHz and 24.576MHz oscillators */
+        ret = get_optional_gpio(&gpio_ext_masterclk_switch, pdev,
+                "ext-masterclk-switch", GPIOF_OUT_INIT_HIGH);
+        if (ret < 0) {
+            goto asoc_botic_card_probe_error;
+        }
+        switch (ext_masterclk & (ENABLE_EXT_MASTERCLK_44K1 | ENABLE_EXT_MASTERCLK_48K)) {
+            case ENABLE_EXT_MASTERCLK_44K1:
+                if (ext_masterclk & ENABLE_EXT_MASTERCLK_SINGLE) {
+                    clk_48k = 0;
+                } else {
+                    /* fallback to internal oscillator */
+                }
+                break;
+            case ENABLE_EXT_MASTERCLK_48K:
+                clk_44k1 = 0;
+                break;
+            case ENABLE_EXT_MASTERCLK_44K1 | ENABLE_EXT_MASTERCLK_48K:
+                /* use both oscillators */
+                break;
+        }
+    } else {
+        ext_masterclk = 0;
+        gpio_ext_masterclk_switch = -1;
+        /* TODO: which clock to disable */
+        clk_44k1 = 0;
+    }
+
+    if (dsd_format_switch & ENABLE_DSD_FORMAT_SWITCH) {
+        ret = get_optional_gpio(&gpio_dsd_format_switch, pdev,
+                "dsd-format-switch", GPIOF_OUT_INIT_HIGH);
+        if (ret < 0) {
+            goto asoc_botic_card_probe_error;
+        }
+    } else {
+        dsd_format_switch = 0;
+        gpio_dsd_format_switch = -1;
+    }
+
+    botic_dai.codec_of_node = of_parse_phandle(np, "audio-codec", 0);
+    if (botic_dai.codec_of_node) {
+        ret = of_property_read_string_index(np, "audio-codec-dai", 0,
+                &botic_dai.codec_dai_name);
+        if (ret < 0) {
+            goto asoc_botic_card_probe_error;
+        }
+    } else {
+        ret = -ENOENT;
+        goto asoc_botic_card_probe_error;
+    }
+
+    botic_dai.cpu_of_node = of_parse_phandle(np, "audio-port", 0);
+    if (!botic_dai.cpu_of_node) {
+        ret = -ENOENT;
+        goto asoc_botic_card_probe_error;
+    }
+
+    /* TODO */
+    botic_dai.platform_of_node = botic_dai.cpu_of_node;
+
+    botic_card.dev = &pdev->dev;
+
+    /* register card */
+    ret = snd_soc_register_card(&botic_card);
+    if (ret) {
+        dev_err(&pdev->dev, "snd_soc_register_card failed (%d)\n", ret);
+        goto asoc_botic_card_probe_error;
+    }
+
+    dev_info(&pdev->dev, "48k %s, 44k1 %s, %s format switch\n",
+            (ext_masterclk & ENABLE_EXT_MASTERCLK_48K) ? "ext" : (
+                clk_48k != 0 ? "int" : "none"),
+            (ext_masterclk & ENABLE_EXT_MASTERCLK_44K1) ? "ext" : "none",
+            (dsd_format_switch & ENABLE_DSD_FORMAT_SWITCH) ? "use" : "do not use");
+
+    if (gpio_card_power_switch >= 0) {
+        /* switch the card on */
+        gpio_set_value(gpio_card_power_switch, 1);
+    }
+
+asoc_botic_card_probe_error:
+    if (ret != 0) {
+        if (gpio_int_masterclk_enable >= 0) {
+            gpio_free(gpio_int_masterclk_enable);
+        }
+        if (gpio_card_power_switch >= 0) {
+            gpio_free(gpio_card_power_switch);
+        }
+        if (gpio_ext_masterclk_switch >= 0) {
+            gpio_free(gpio_ext_masterclk_switch);
+        }
+        if (gpio_dsd_format_switch >= 0) {
+            gpio_free(gpio_dsd_format_switch);
+        }
+    }
+
+    return ret;
+}
+
+static int asoc_botic_card_remove(struct platform_device *pdev)
+{
+    struct snd_soc_card *card = platform_get_drvdata(pdev);
+
+    snd_soc_unregister_card(card);
+
+    if (gpio_int_masterclk_enable >= 0) {
+        /* switch the oscillator off first */
+        gpio_set_value(gpio_int_masterclk_enable, 0);
+        gpio_free(gpio_int_masterclk_enable);
+    }
+    if (gpio_card_power_switch >= 0) {
+        /* switch the card off first */
+        gpio_set_value(gpio_card_power_switch, 0);
+        gpio_free(gpio_card_power_switch);
+    }
+    if (gpio_ext_masterclk_switch >= 0) {
+        gpio_free(gpio_ext_masterclk_switch);
+    }
+    if (gpio_dsd_format_switch >= 0) {
+        gpio_free(gpio_dsd_format_switch);
+    }
+
+    return 0;
+}
+
+static void asoc_botic_card_shutdown(struct platform_device *pdev)
+{
+    if (gpio_card_power_switch >= 0) {
+        /* switch the card off first */
+        gpio_set_value(gpio_card_power_switch, 0);
+        /* sleep until card will be powered down safely */
+        mdelay(1000);
+    }
+}
+
+#ifdef CONFIG_PM_SLEEP
+static int asoc_botic_card_suspend(struct platform_device *pdev, pm_message_t state)
+{
+    if (gpio_card_power_switch >= 0) {
+        /* switch the card off before going suspend */
+        gpio_set_value(gpio_card_power_switch, 0);
+    }
+
+    return 0;
+}
+
+static int asoc_botic_card_resume(struct platform_device *pdev)
+{
+    if (gpio_card_power_switch >= 0) {
+        /* switch the card on after resuming from suspend */
+        gpio_set_value(gpio_card_power_switch, 1);
+    }
+
+    return 0;
+}
+#else
+#define asoc_botic_card_suspend NULL
+#define asoc_botic_card_resume NULL
+#endif
+
+#if defined(CONFIG_OF)
+static const struct of_device_id asoc_botic_card_dt_ids[] = {
+    { .compatible = "botic-audio-card" },
+    { },
+};
+
+MODULE_DEVICE_TABLE(of, asoc_botic_card_dt_ids);
+#endif
+
+static struct platform_driver asoc_botic_card_driver = {
+    .probe = asoc_botic_card_probe,
+    .remove = asoc_botic_card_remove,
+    .shutdown = asoc_botic_card_shutdown,
+    .suspend = asoc_botic_card_suspend,
+    .resume = asoc_botic_card_resume,
+    .driver = {
+        .name = "asoc-botic-card",
+        .of_match_table = of_match_ptr(asoc_botic_card_dt_ids),
+    },
+};
+
+module_platform_driver(asoc_botic_card_driver);
+
+module_param(ext_masterclk, int, 0444);
+MODULE_PARM_DESC(ext_masterclk, "available external masterclocks");
+
+module_param(dsd_format_switch, int, 0444);
+MODULE_PARM_DESC(dsd_format_switch, "mode of dsd format switch");
+
+module_param(clk_44k1, int, 0644);
+MODULE_PARM_DESC(clk_44k1, "frequency of crystal for 44k1 modes");
+
+module_param(clk_48k, int, 0644);
+MODULE_PARM_DESC(clk_48k, "frequency of crystal for 48k modes");
+
+module_param(blr_ratio, int, 0644);
+MODULE_PARM_DESC(blr_ratio, "force BCLK/LRCLK ratio");
+
+MODULE_AUTHOR("Miroslav Rudisin");
+MODULE_DESCRIPTION("ASoC Botic sound card");
+MODULE_LICENSE("GPL");
+MODULE_ALIAS("platform:asoc-botic-card");
diff -Naur linux-5.0_old/sound/soc/generic/Kconfig linux-5.0/sound/soc/generic/Kconfig
--- linux-5.0_old/sound/soc/generic/Kconfig	2019-04-20 13:48:44.167531901 +0200
+++ linux-5.0/sound/soc/generic/Kconfig	2019-04-20 13:50:14.429306907 +0200
@@ -16,6 +16,20 @@
 	  This option enables generic simple SCU sound card support.
 	  It supports DPCM of multi CPU single Codec system.
 
+config SND_BOTIC_CARD
+ 	tristate "ASoC Botic sound card support"
+ 	help
+ 	  This option enables Botic sound card support
+ 
+config SND_AM33XX_SOC_BOTIC
+ 	tristate "Botic on BeagleBone Black"
+ 	depends on SOC_AM33XX
+ 	select SND_BOTIC_CARD
+ 	select SND_EDMA_SOC
+ 	select SND_DAVINCI_SOC_MCASP
+ 	help
+ 	  Say Y or M if you want to add support for Botic on BeagleBone Black.
+
 config SND_AUDIO_GRAPH_CARD
 	tristate "ASoC Audio Graph sound card support"
 	depends on OF
diff -Naur linux-5.0_old/sound/soc/generic/Makefile linux-5.0/sound/soc/generic/Makefile
--- linux-5.0_old/sound/soc/generic/Makefile	2019-04-20 13:48:44.167531901 +0200
+++ linux-5.0/sound/soc/generic/Makefile	2019-04-20 13:50:14.429306907 +0200
@@ -4,9 +4,11 @@
 snd-soc-simple-scu-card-objs	:= simple-scu-card.o
 snd-soc-audio-graph-card-objs	:= audio-graph-card.o
 snd-soc-audio-graph-scu-card-objs	:= audio-graph-scu-card.o
+snd-soc-botic-objs	:= botic-card.o
 
 obj-$(CONFIG_SND_SIMPLE_CARD_UTILS)	+= snd-soc-simple-card-utils.o
 obj-$(CONFIG_SND_SIMPLE_CARD)		+= snd-soc-simple-card.o
+obj-$(CONFIG_SND_BOTIC_CARD)	+= snd-soc-botic.o
 obj-$(CONFIG_SND_SIMPLE_SCU_CARD)	+= snd-soc-simple-scu-card.o
 obj-$(CONFIG_SND_AUDIO_GRAPH_CARD)	+= snd-soc-audio-graph-card.o
 obj-$(CONFIG_SND_AUDIO_GRAPH_SCU_CARD)	+= snd-soc-audio-graph-scu-card.o
